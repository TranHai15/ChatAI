import User from "../models/User.js";
import axios from "axios";

// Qu·∫£n l√Ω ng∆∞·ªùi d√πng
const dataUser = {
  getAllUsers: async (req, res) => {
    try {
      const dataAllUser = await User.getUsers();

      if (!dataAllUser) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
      }
      return res.status(200).json(dataAllUser);
    } catch (error) {
      return res.status(500).json("L·ªói truy v·∫•n dataUser");
    }
  },

  // X√≥a ng∆∞·ªùi d√πng
  deleteUser: async (req, res) => {
    try {
      const idUser = req.params.id; // L·∫•y id t·ª´ req.params thay v√¨ req.body
      if (!idUser) {
        return res.status(400).json("ID ng∆∞·ªùi d√πng l√† b·∫Øt bu·ªôc."); // Ki·ªÉm tra ID
      }

      const deleteCount = await User.delete(idUser); // G·ªçi h√†m delete

      if (deleteCount > 0) {
        return res
          .status(200)
          .json({ message: "X√≥a th√†nh c√¥ng", deletedCount: deleteCount });
      } else {
        return res.status(404).json("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a.");
      }
    } catch (error) {
      return res
        .status(500)
        .json({ message: "L·ªói x√≥a ng∆∞·ªùi d√πng", error: error.message });
    }
  },
  getAllChat: async (req, res) => {
    try {
      const idUser = req.body.id;
      // console.log(idUser);
      if (!idUser) {
        return res.status(400).json("ID ng∆∞·ªùi d√πng l√† b·∫Øt bu·ªôc."); // Ki·ªÉm tra ID
      }

      const getChat = await User.getAllChat(idUser);
      // console.log("message: Lay th√†nh c√¥ng");
      return res.status(200).json({ getChat });
    } catch (error) {
      return res
        .status(500)
        .json({ message: "L·ªói lay lich su chat", error: error.message });
    }
  },
  getAllTopCauHoi: async (req, res) => {
    try {
      const getChatTop = await User.getAllTopQen();
      // console.log("message: Lay th√†nh c√¥ng");
      return res.status(200).json({ getChatTop });
    } catch (error) {
      return res
        .status(500)
        .json({ message: "L·ªói lay top su chat", error: error.message });
    }
  },
  getAllChatAdmin: async (req, res) => {
    try {
      const idUser = req.params.id;

      console.log(idUser);
      if (!idUser) {
        return res.status(400).json("ID chat l√† b·∫Øt bu·ªôc."); // Ki·ªÉm tra ID
      }

      const getChat = await User.getAllChatByidChat_id(idUser);
      // console.log("message: Lay th√†nh c√¥ng");
      return res.status(200).json({ getChat });
    } catch (error) {
      return res.status(500).json({
        message: "L·ªói lay lich su chat chi tiet",
        error: error.message
      });
    }
  },
  getOneChat: async (req, res) => {
    try {
      const idUser = req.params.id; // L·∫•y id t·ª´ req.params thay v√¨ req.body
      // console.log(idUser);
      if (!idUser) {
        return res.status(400).json("ID ng∆∞·ªùi d√πng l√† b·∫Øt bu·ªôc."); // Ki·ªÉm tra ID
      }

      const getChat = await User.getAllChat(idUser);
      // console.log("message: Lay th√†nh c√¥ng");
      return res.status(200).json({ getChat });
    } catch (error) {
      return res
        .status(500)
        .json({ message: "L·ªói lay lich su chat", error: error.message });
    }
  },

  insertMessageChat: async (req, res) => {
    try {
      console.log("üöÄ ~ insertMessageChat: ~ req.body:", req.body);
      const { room, message, id } = req.body;
      console.log("üöÄ ~ insertMessageChat: ~ message:", message);
      const role = message.role;
      const title = message.content;
      const now = new Date();
      console.log({ role: role, title: title, room: room });
      // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
      const roomExists = await User.checkRoomExists(room);

      if (roomExists) {
        // N·∫øu ph√≤ng t·ªìn t·∫°i, th√™m tin nh·∫Øn v√†o b·∫£ng chi ti·∫øt
        const insertOneChat = await User.inssertOnechat(room, role, title, now);
        return res.status(200).json({
          success: true,
          message: "ƒê√£ th√™m tin nh·∫Øn v√†o ph√≤ng hi·ªán c√≥",
          data: insertOneChat,
          title: title
        });
      } else {
        // N·∫øu ph√≤ng ch∆∞a t·ªìn t·∫°i, t·∫°o ph√≤ng m·ªõi v√† th√™m tin nh·∫Øn
        const createRoom = await User.insertMessage(room, id, title, now); // ƒê·∫£m b·∫£o h√†m insertMessage ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
        if (createRoom) {
          const insertOneChat = await User.inssertOnechat(
            room,
            role,
            title,
            now
          );

          return res.status(200).json({
            success: true,
            message: "Ph√≤ng m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o v√† tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c th√™m",
            data: insertOneChat,
            title: title
          });
        } else {
          return res.status(500).json({
            success: false,
            message: "Kh√¥ng th·ªÉ t·∫°o ph√≤ng m·ªõi"
          });
        }
      }
    } catch (error) {
      console.error("Error:", error.message);
      return res.status(500).json({
        success: false,
        message: "L·ªói l·∫•y l·ªãch s·ª≠ chat",
        error: error.message
      });
    }
  },
  getAllChatByIdRoom: async (req, res) => {
    try {
      const idUser = req.body.id;
      console.log(idUser);
      if (!idUser) {
        return res.status(400).json("ID chat l√† b·∫Øt bu·ªôc."); // Ki·ªÉm tra ID
      }

      const getChat = await User.getAllChatByidChat_id(idUser);
      // console.log("message: Lay th√†nh c√¥ng");
      return res.status(200).json({ getChat });
    } catch (error) {
      return res.status(500).json({
        message: "L·ªói lay lich su chat chi tiet",
        error: error.message
      });
    }
  }
};

export default dataUser;
